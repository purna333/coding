class Solution {
    public int getMaximumGold(int[][] grid) {
        int r=grid.length;
        int c=grid[0].length;
        int max=0;
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                if(grid[i][j]!=0) 
                max= Math.max(max,dfs(grid,i,j,r,c));
            }
        }
        return max;
    }
    int dfs(int[][] grid,int i,int j,int r,int c){
        if(i<0 || i>=r || j<0 || j>=c || grid[i][j]==0){
            return 0;
        }
        int temp=grid[i][j];
        grid[i][j]=0;
        int top= dfs(grid,i-1,j,r,c);
        int left= dfs(grid,i,j-1,r,c);
        int down= dfs(grid,i+1,j,r,c);
        int right = dfs(grid,i,j+1,r,c);
        grid[i][j]=temp;

        return temp+Math.max(left,Math.max(right,(Math.max(top,down))));

    }
}
